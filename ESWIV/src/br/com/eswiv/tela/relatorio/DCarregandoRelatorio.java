/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DCarregandoRelatorio.java
 *
 * Created on 28/03/2011, 08:49:32
 */

package br.com.eswiv.tela.relatorio;

import br.com.eswiv.exceptions.ReportException;
import br.com.util.Relatorio;
import br.com.util.Util;
import br.com.util.XMLRelatorio;
import java.util.List;
import java.util.Map;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

/**
 *
 * @author Everton
 */
public class DCarregandoRelatorio extends javax.swing.JDialog {

    private JFrame frame;

    /** Creates new form DCarregandoRelatorio */
    public DCarregandoRelatorio(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        this.frame = (JFrame) parent;
        initComponents();

        pbCarregando.setIndeterminate(true);
    }

    public void gerarRelatorio(String[] nomes, Map parametros) {
        new Thread(new GerarRelatorio(nomes, parametros)).start();
    }
    public void gerarRelatorio(String nome, List lista, Map parametros) {        
        new Thread(new GerarRelatorio(nome, lista, parametros)).start();
        this.setVisible(true);
    }
    
    public void gerarRelatorio(String nome, Map parametros) {        
        new Thread(new GerarRelatorio(nome, parametros)).start();
        this.setVisible(true);
    }
    
    public void gerarRelatorio(XMLRelatorio relatorio, Map parametros) {        
        new Thread(new GerarRelatorio(relatorio, parametros)).start();
        this.setVisible(true);
    }

    public void processoConcluido() {
        pbCarregando.setIndeterminate(false);
        pbCarregando.setValue(100);
        this.dispose();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pbCarregando = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Carregando Relatório...");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pbCarregando, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pbCarregando, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        java.awt.Dimension dialogSize = getSize();
        setLocation((screenSize.width-dialogSize.width)/2,(screenSize.height-dialogSize.height)/2);
    }// </editor-fold>//GEN-END:initComponents

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DCarregandoRelatorio dialog = new DCarregandoRelatorio(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar pbCarregando;
    // End of variables declaration//GEN-END:variables

    class GerarRelatorio implements Runnable {
        String[] nomes;
        String nome;
        List lista;
        Map parametros;

        public GerarRelatorio(String[] nomes, Map parametros) {
            this.nomes = nomes;
            this.parametros = parametros;
        }
        
        public GerarRelatorio(String nome, List lista, Map parametros) {
            this.nome = nome;
            this.lista = lista;
            this.parametros = parametros;
        }
        
        public GerarRelatorio(String nome, Map parametros) {
            this.nome = nome;
            this.parametros = parametros;
        }
        
        public GerarRelatorio(XMLRelatorio relatorio, Map parametros) {
            this.nome = relatorio.getCaminho();
            this.parametros = parametros;
        }

        public void run() {
            Relatorio rel = new Relatorio();
            try {
                if(lista != null) {
                    rel.gerarRelatorio(nome, lista, parametros);
                } else if (nome != null) {                    
                    rel.gerarRelatorio(nome, parametros);
                } else {
                    for(String s: nomes) {
                        rel.gerarRelatorio(s, parametros);
                    }
                }
                SwingUtilities.invokeLater(new Update(false)); 
            } catch (ReportException ex) {
                JOptionPane.showMessageDialog(null, ex);
            } catch (Exception ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(null, "Falha ao gerar relatório");
                Util.logException(ex);
            }
            dispose();
            frame.setAlwaysOnTop(false);
            //frame.dispose();
        }
    }
    
    // Classe para atualizar os componentes da tela dentro de uma thread
    class Update implements Runnable {
        boolean estado;        
        Update(boolean estado) {
            this.estado = estado;
        }        
        public void run() {
            if(estado) {
                pbCarregando.setIndeterminate(true);
            } else {
                pbCarregando.setIndeterminate(false);
            }
        }        
    }
}
